{"name": "test_query_books", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: unknown error: Cannot set property 'background' of undefined\n  (Session info: chrome=73.0.3683.103)\n  (Driver info: chromedriver=72.0.3626.69 (3c16f8a135abc0d4da2dff33804db79b849a7c38),platform=Mac OS X 10.14.1 x86_64)", "trace": "self = <src.testcase.books.test_books.TestBooks object at 0x10e6e2c50>\n\n    @allure.story(\"书籍查询\")\n    def test_query_books(self):\n        book_page = BookPage()\n        book_page.query_book(\"使用Python进行数据分析\")\n        with allure.step('校验结果'):\n>           assert \"Wes McKinney\" in book_page.get_auther_txt()\n\ntestcase/books/test_books.py:15: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npage/bookpage.py:53: in get_auther_txt\n    elementss = self._locate_auther_text_eles()\npage/bookpage.py:50: in _locate_auther_text_eles\n    return self.find_elements(self._auther_text)\npage/basepage.py:21: in find_elements\n    self.driver.execute_script(\"arguments[0].style.background = 'rgb(138,43,226)';\", ele)\n../../../doubanTest/lib/python3.6/site-packages/selenium/webdriver/remote/webdriver.py:636: in execute_script\n    'args': converted_args})['value']\n../../../doubanTest/lib/python3.6/site-packages/selenium/webdriver/remote/webdriver.py:321: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x10e7fcb38>\nresponse = {'sessionId': '938f033674bb24981e324999d168584c', 'status': 13, 'value': {'message': \"unknown error: Cannot set proper...(Driver info: chromedriver=72.0.3626.69 (3c16f8a135abc0d4da2dff33804db79b849a7c38),platform=Mac OS X 10.14.1 x86_64)\"}}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: Cannot set property 'background' of undefined\nE         (Session info: chrome=73.0.3683.103)\nE         (Driver info: chromedriver=72.0.3626.69 (3c16f8a135abc0d4da2dff33804db79b849a7c38),platform=Mac OS X 10.14.1 x86_64)\n\n../../../doubanTest/lib/python3.6/site-packages/selenium/webdriver/remote/errorhandler.py:242: WebDriverException"}, "steps": [{"name": "切换到我的书籍窗口", "status": "passed", "start": 1554981892473, "stop": 1554981892480}, {"name": "查询书籍", "status": "passed", "start": 1554981892480, "stop": 1554981895598}, {"name": "点击查询", "status": "passed", "start": 1554981895598, "stop": 1554981906247}, {"name": "校验结果", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: unknown error: Cannot set property 'background' of undefined\n  (Session info: chrome=73.0.3683.103)\n  (Driver info: chromedriver=72.0.3626.69 (3c16f8a135abc0d4da2dff33804db79b849a7c38),platform=Mac OS X 10.14.1 x86_64)\n\n", "trace": "  File \"/Users/zhulinping/workspace/python/Code/doubanTest/src/testcase/books/test_books.py\", line 15, in test_query_books\n    assert \"Wes McKinney\" in book_page.get_auther_txt()\n  File \"/Users/zhulinping/workspace/python/Code/doubanTest/src/page/bookpage.py\", line 53, in get_auther_txt\n    elementss = self._locate_auther_text_eles()\n  File \"/Users/zhulinping/workspace/python/Code/doubanTest/src/page/bookpage.py\", line 50, in _locate_auther_text_eles\n    return self.find_elements(self._auther_text)\n  File \"/Users/zhulinping/workspace/python/Code/doubanTest/src/page/basepage.py\", line 21, in find_elements\n    self.driver.execute_script(\"arguments[0].style.background = 'rgb(138,43,226)';\", ele)\n  File \"/Users/zhulinping/workspace/python/doubanTest/lib/python3.6/site-packages/selenium/webdriver/remote/webdriver.py\", line 636, in execute_script\n    'args': converted_args})['value']\n  File \"/Users/zhulinping/workspace/python/doubanTest/lib/python3.6/site-packages/selenium/webdriver/remote/webdriver.py\", line 321, in execute\n    self.error_handler.check_response(response)\n  File \"/Users/zhulinping/workspace/python/doubanTest/lib/python3.6/site-packages/selenium/webdriver/remote/errorhandler.py\", line 242, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "start": 1554981906247, "stop": 1554981916317}], "attachments": [{"name": "log", "source": "bf54fd02-6f37-40b3-bd0c-b55115b9dd78-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "a273640d-4fbb-490d-a2f0-421a122e807c-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "143c1752-23de-4676-bd3b-45952aa5272c-attachment.txt", "type": "text/plain"}], "start": 1554981889377, "stop": 1554981916320, "uuid": "d524c1d5-c256-43b3-88a8-7b6060d4d513", "historyId": "e8d1e344275692b61fc9e6461fc32be5", "fullName": "src.testcase.books.test_books.TestBooks#test_query_books", "labels": [{"name": "story", "value": "书籍查询"}, {"name": "feature", "value": "我的书籍"}, {"name": "parentSuite", "value": "src.testcase.books"}, {"name": "suite", "value": "test_books"}, {"name": "subSuite", "value": "TestBooks"}, {"name": "host", "value": "zhu77demac.local"}, {"name": "thread", "value": "8530-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "src.testcase.books.test_books"}]}